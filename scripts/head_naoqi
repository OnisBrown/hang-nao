#!/usr/bin/env python2.7

import sys
import naoqi
from naoqi import ALProxy
import time
import almath
import rospy
import roslib
from trajectory_msgs.msg import JointTrajectory, JointTrajectoryPoint

rospy.init_node('mover', anonymous=True)
ph = rospy.Publisher('/nao_dcm/Head_controller/command', JointTrajectory, queue_size=100)
r = rospy.Rate(100)
jt = JointTrajectory()
jtp = JointTrajectoryPoint()
interval = 0.5

def pub(p):
	p.publish(jt)


def head_move(goal):
	jtp.positions = goal
	jtp.time_from_start = rospy.Duration(interval)
	jt.points.append(jtp)


def move_setup(joints):

	jt.joint_names = joints
	jt.points = []
	jtp.positions = []
	jtp.velocities = []
	jtp.accelerations = []
	jtp.effort = []
	jtp.time_from_start = rospy.Duration()

	
def head_nod(sad)
	joints = ['HeadPitch', 'HeadYaw']
	
	if sad:
		interval = 0.4
		move_setup(joints)
		goal = [0.0, 0.0]
		head_move(goal)
		pub(ph)
		move_setup(joints)
		goal[0] += 0.6
		head_move(goal)
		pub(ph)
		move_setup(joints)
		goal[1] -= 0.6
		head_move(goal)
		pub(ph)
	
	else:
		interval = 0.5
		move_setup(joints)
		goal = [0.0, 0.0]
		head_move(goal)
		pub(ph)
		move_setup(joints)
		goal[0] += 0.8
		head_move(goal)
		pub(ph)
		move_setup(joints)
		goal[0] -= 1
		head_move(goal)
		pub(ph)

def head_shake(sad):
	joints = ['HeadPitch', 'HeadYaw']
	
	if sad:
		interval = 0.7
		move_setup(joints)
		goal = [0.4, 1.0]
		head_move(goal)
		pub(ph)
		move_setup(joints)
		goal[1] -= 1
		head_move(goal)
		pub(ph)
		move_setup(joints)
		goal[1] -= 1
		head_move(goal)
		pub(ph)
	
	else:
		interval = 0.4
		move_setup(joints)
		goal = [0.0, 1.0]
		head_move(goal)
		pub(ph)
		move_setup(joints)
		goal[1] -= 1
		head_move(goal)
		pub(ph)
		move_setup(joints)
		goal[1] -= 1
		head_move(goal)
		pub(ph)


def myHook():
	print "shutting down"


rospy.on_shutdown(myHook)

while not rospy.is_shutdown():
	try:

		head_shake(True)
		head_nod(True)

	except KeyboardInterrupt:
		sys.exit()
